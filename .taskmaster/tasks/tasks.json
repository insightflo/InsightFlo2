{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 디렉토리 구조 생성",
        "description": "Flutter 프론트엔드와 Next.js 백엔드의 기본 프로젝트 구조를 설정하고 필수 설정 파일들을 생성합니다.",
        "details": "Flutter 앱: `flutter create frontend --org com.insightflo` 실행, Clean Architecture 폴더 구조 (presentation, domain, data) 생성. Next.js 백엔드: `npx create-next-app@latest backend --typescript --tailwind --eslint --app` 실행, API 라우트 구조 설정. Docker 컨테이너 설정 파일 작성, VSCode workspace 설정 업데이트.",
        "testStrategy": "프로젝트 빌드 성공 확인, 개발 서버 정상 구동 테스트, 기본 라우팅 동작 확인",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 설계 및 Supabase 연동",
        "description": "Supabase PostgreSQL 데이터베이스 스키마를 설계하고 연동을 구성합니다.",
        "details": "테이블 설계: users (id, email, password_hash, nickname, created_at), news (id, title, content, summary, sentiment, keywords, published_at), user_keywords (user_id, keyword, weight), bookmarks (user_id, news_id, created_at). Supabase 프로젝트 생성, RLS 정책 설정, API 키 및 URL 환경변수 구성. Next.js에서 @supabase/supabase-js 클라이언트 설정.",
        "testStrategy": "데이터베이스 연결 테스트, 기본 CRUD 작업 확인, RLS 정책 동작 검증",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "JWT 기반 사용자 인증 시스템 구현",
        "description": "이메일/패스워드 기반의 회원가입, 로그인, JWT 토큰 관리 시스템을 구현합니다.",
        "details": "Next.js API Routes: /api/auth/signup, /api/auth/signin, /api/auth/refresh 구현. bcrypt로 패스워드 해싱, jsonwebtoken으로 JWT 생성/검증. 미들웨어로 JWT 토큰 검증, Refresh Token 로테이션 구현. Access Token 1시간, Refresh Token 30일 만료 설정. 비밀번호 강도 검증 (8자 이상, 영문+숫자+특수문자).",
        "testStrategy": "회원가입/로그인 플로우 테스트, JWT 토큰 생성/검증 테스트, 토큰 만료 처리 테스트, 비밀번호 검증 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Flutter 앱 기본 구조 및 의존성 설정",
        "description": "Clean Architecture 기반의 Flutter 앱 구조를 설정하고 필수 패키지들을 구성합니다.",
        "details": "pubspec.yaml 패키지 설정: riverpod (상태관리), dio (HTTP), drift (로컬DB), flutter_secure_storage (보안 저장소), firebase_messaging (푸시), go_router (라우팅). 디렉토리 구조: lib/presentation (UI), lib/domain (비즈니스 로직), lib/data (데이터 계층), lib/core (공통 유틸). Material 3 테마 설정, 다크테마 지원.",
        "testStrategy": "패키지 의존성 해결 확인, 앱 빌드 성공 테스트, Clean Architecture 구조 검증, Material 3 테마 적용 확인",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Flutter HTTP 클라이언트 및 API 연동 구성",
        "description": "Dio 기반의 HTTP 클라이언트와 JWT 토큰 자동 갱신 인터셉터를 구현합니다.",
        "details": "Dio 클라이언트 설정: Base URL 설정, 타임아웃 30초, JSON 응답 처리. JWT 인터셉터: Authorization 헤더 자동 추가, 401 응답 시 토큰 자동 갱신, 갱신 실패 시 로그인 화면 리다이렉트. 에러 핸들링: 네트워크 에러, 서버 에러, 타임아웃 처리. flutter_secure_storage로 토큰 암호화 저장.",
        "testStrategy": "API 요청/응답 테스트, JWT 토큰 자동 갱신 테스트, 에러 핸들링 테스트, 보안 저장소 암호화 확인",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "사용자 인증 UI 및 비즈니스 로직 구현",
        "description": "로그인, 회원가입, 패스워드 재설정 화면과 관련 비즈니스 로직을 구현합니다.",
        "details": "UI 화면: LoginPage, SignUpPage, ForgotPasswordPage Material 3 디자인. Riverpod Provider: AuthProvider, AuthState 관리, 로그인 상태 persistence. 폼 검증: 이메일 형식, 패스워드 강도 검증, 실시간 검증 피드백. 로딩 상태, 에러 메시지 표시. biometric 인증 옵션 (선택사항).",
        "testStrategy": "로그인/회원가입 플로우 테스트, 폼 검증 테스트, 상태 관리 테스트, UI 반응성 테스트",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "뉴스 데이터 모델 및 API 엔드포인트 구현",
        "description": "뉴스 데이터 구조와 개인화 피드 API를 구현합니다.",
        "details": "데이터 모델: News (id, title, content, summary, sentiment, keywords[], publishedAt, imageUrl), PersonalizedFeed (news[], hasMore, nextCursor). API 엔드포인트: GET /api/news/personalized (개인화 피드), GET /api/news/search (검색), GET /api/news/{id} (상세). 페이지네이션: cursor 기반, limit 20개. 개인화 알고리즘: 키워드 매칭 40%, 포트폴리오 관련도 30%, 감정 가중치 20%, 시간 가중치 10%.",
        "testStrategy": "API 응답 구조 검증, 페이지네이션 테스트, 개인화 알고리즘 점수 계산 테스트, 성능 테스트 (P95 < 300ms)",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "뉴스 피드 UI 컴포넌트 구현",
        "description": "개인화된 뉴스 피드와 뉴스 카드 UI 컴포넌트를 구현합니다.",
        "details": "NewsCard 위젯: 제목(2줄), AI 요약(3줄), 감정 아이콘(긍정/부정/중립), 키워드 태그, 시간, 북마크/공유 버튼. NewsFeedPage: ListView.builder로 무한스크롤, pull-to-refresh, 로딩/에러/빈 상태 처리. 상태관리: NewsFeedProvider (Riverpod), 캐싱 전략 구현. 성능 최적화: 이미지 캐싱, 리스트 뷰 성능 튜닝.",
        "testStrategy": "UI 컴포넌트 렌더링 테스트, 무한스크롤 동작 테스트, 상태 변화 테스트, 성능 테스트 (60fps 유지)",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "키워드 관리 시스템 구현",
        "description": "사용자의 관심 키워드 추가/삭제/가중치 설정 기능을 구현합니다.",
        "details": "API 엔드포인트: GET/POST/DELETE /api/user/keywords, PUT /api/user/keywords/{id}. 키워드 관리: 최대 20개, 키워드별 가중치 1-5점, 자동완성 제안, 중복 방지. UI: KeywordManagePage, 검색 입력, 태그 형태 표시, 가중치 슬라이더. 키워드 추천: 사용자 행동 기반 AI 추천 (선택사항). 유효성 검사: 최대 50자, 부적절한 키워드 필터링.",
        "testStrategy": "키워드 CRUD 기능 테스트, 가중치 설정 테스트, 자동완성 테스트, 제한 조건 검증",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "북마크 기능 구현",
        "description": "뉴스 북마크 추가/삭제/목록 조회 기능을 구현합니다.",
        "details": "데이터베이스 테이블: bookmarks (user_id, news_id, created_at, folder_id). API 엔드포인트: GET/POST/DELETE /api/user/bookmarks. UI 컴포넌트: 북마크 버튼, BookmarksPage 목록, 검색 기능. 제한사항: 최대 1000개 북마크, 30일 자동 정리 옵션. 오프라인 지원: 북마크된 뉴스 로컬 캐싱. 내보내기: JSON 형식 백업.",
        "testStrategy": "북마크 추가/삭제 테스트, 목록 조회 테스트, 제한 조건 검증, 오프라인 동기화 테스트",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "검색 및 필터링 기능 구현",
        "description": "실시간 뉴스 검색과 다양한 필터링 옵션을 구현합니다.",
        "details": "검색 API: GET /api/news/search, 전문 검색, 키워드 하이라이트. 필터 옵션: 키워드별, 감정별(긍정/부정/중립), 기간별(오늘/주/월), 정렬(최신/관련도/인기). UI: SearchPage, 검색바, 필터 칩, 검색 히스토리. 자동완성: 최근 검색어, 인기 검색어. 성능: 검색 debouncing 500ms, 캐싱 전략.",
        "testStrategy": "검색 정확도 테스트, 필터링 결과 검증, 자동완성 기능 테스트, 검색 성능 테스트",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "로컬 데이터베이스 및 오프라인 지원 구현",
        "description": "Drift를 사용한 로컬 데이터베이스와 오프라인 캐싱을 구현합니다.",
        "details": "Drift 스키마: cached_news, cached_bookmarks, user_settings 테이블. 캐싱 전략: 최신 뉴스 100개, 북마크 전체, 사용자 설정 로컬 저장. 동기화: 온라인 복귀 시 자동 동기화, 충돌 해결(서버 우선). 오프라인 UI: 네트워크 상태 표시, 캐시 데이터 표시, 동기화 버튼. 이미지 캐싱: cached_network_image 패키지 사용.",
        "testStrategy": "로컬 DB 작업 테스트, 동기화 시나리오 테스트, 오프라인 모드 테스트, 이미지 캐싱 테스트",
        "priority": "medium",
        "dependencies": [
          4,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "푸시 알림 시스템 구현",
        "description": "FCM 기반의 개인화된 푸시 알림 시스템을 구현합니다.",
        "details": "Firebase 프로젝트 설정, FCM 구성. Flutter: firebase_messaging 패키지, 토큰 등록/갱신, 포그라운드/백그라운드 알림 처리. 백엔드: FCM Admin SDK, 알림 발송 로직, 개인화 알림 큐. 알림 종류: 키워드 기반 뉴스, 중요 속보, 일일 요약. 사용자 설정: 알림 켜기/끄기, 시간대(09:00-22:00), 빈도(즉시/1시간/3시간), 방해금지 모드.",
        "testStrategy": "푸시 알림 수신 테스트, 딥링크 동작 테스트, 개인화 로직 테스트, 설정 반영 테스트",
        "priority": "high",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "뉴스 상세보기 화면 구현",
        "description": "뉴스 전문 보기와 관련 뉴스 추천 기능을 구현합니다.",
        "details": "NewsDetailPage: 웹뷰로 원문 표시, AI 요약 하단 고정, 관련 뉴스 3-5개 추천. 네비게이션: 뒤로가기, 공유, 북마크 버튼. 관련 뉴스: 키워드 유사도 기반 추천 알고리즘. 성능 최적화: 웹뷰 캐싱, 이미지 lazy loading. 접근성: 폰트 크기 조절, 스크린 리더 지원.",
        "testStrategy": "웹뷰 로딩 테스트, 관련 뉴스 추천 정확도 테스트, 네비게이션 동작 테스트, 접근성 테스트",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "사용자 프로필 및 설정 화면 구현",
        "description": "사용자 프로필 관리와 앱 설정 화면을 구현합니다.",
        "details": "ProfilePage: 닉네임 편집, 프로필 이미지 업로드(선택사항), 계정 삭제. SettingsPage: 알림 설정, 테마 변경(다크/라이트), 언어 설정, 캐시 정리. 계정 삭제: 완전 삭제 확인 다이얼로그, 서버 데이터 삭제 API. 데이터 내보내기: 북마크, 키워드 JSON 백업. 개인정보 보호: 데이터 수집 동의, 개인정보 처리방침.",
        "testStrategy": "프로필 수정 테스트, 설정 변경 반영 테스트, 계정 삭제 프로세스 테스트, 데이터 내보내기 테스트",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "포트폴리오 관리 기능 구현 (선택사항)",
        "description": "사용자의 투자 포트폴리오 기반 뉴스 필터링을 구현합니다.",
        "details": "데이터 모델: portfolio (user_id, symbol, name, weight, type), 종목 타입: KR_STOCK, US_STOCK, CRYPTO. API: 종목 검색, 포트폴리오 CRUD. UI: PortfolioPage, 종목 검색 자동완성, 비중 설정 슬라이더. 뉴스 연관도: 종목-뉴스 매칭 알고리즘, 영향도 점수 표시. 제한: 최대 50개 종목, 비중 합계 100%.",
        "testStrategy": "종목 검색 정확도 테스트, 포트폴리오 관리 기능 테스트, 뉴스 연관도 계산 테스트",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "앱 성능 최적화 및 모니터링 구현",
        "description": "앱 시작 속도, 메모리 사용량, 배터리 최적화를 구현합니다.",
        "details": "시작 성능: 스플래시 화면 최적화, 초기 데이터 로딩 최소화, lazy loading 적용. 메모리 최적화: 이미지 캐시 크기 제한, 리스트 뷰 아이템 재활용, 메모리 누수 검사. 배터리 최적화: 백그라운드 작업 최소화, 네트워크 요청 배칭. 모니터링: Firebase Crashlytics, Performance Monitoring, 사용자 분석.",
        "testStrategy": "앱 시작 시간 측정 테스트, 메모리 사용량 모니터링, 배터리 드레인 테스트, 크래시 보고 테스트",
        "priority": "medium",
        "dependencies": [
          12,
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "보안 강화 및 데이터 보호 구현",
        "description": "앱과 API의 보안을 강화하고 개인정보를 보호합니다.",
        "details": "앱 보안: Certificate Pinning, 루팅/탈옥 감지, 민감정보 암호화 저장. API 보안: Rate Limiting (100 req/min), CORS 설정, SQL Injection 방지, XSS 필터링. 데이터 보호: AES-256 암호화, GDPR 준수, 개인정보 최소 수집. 인증 강화: 계정 잠금(5회 실패), 비정상 로그인 감지, 세션 타임아웃.",
        "testStrategy": "보안 스캔 테스트, Certificate Pinning 검증, Rate Limiting 테스트, 데이터 암호화 확인",
        "priority": "high",
        "dependencies": [
          5,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "테스트 스위트 구현",
        "description": "단위 테스트, 통합 테스트, E2E 테스트를 구현합니다.",
        "details": "Flutter 테스트: 위젯 테스트, 유닛 테스트, 통합 테스트, Golden 테스트. 백엔드 테스트: Jest 유닛 테스트, API 통합 테스트, 데이터베이스 테스트. E2E 테스트: 사용자 플로우 테스트, 크로스 플랫폼 테스트. 테스트 커버리지: 비즈니스 로직 80%, API 90%, 유틸 함수 100%. CI/CD: GitHub Actions 테스트 자동화.",
        "testStrategy": "테스트 커버리지 목표 달성 확인, CI/CD 파이프라인 테스트, E2E 시나리오 검증",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "배포 환경 설정 및 CI/CD 파이프라인 구축",
        "description": "프로덕션 배포를 위한 환경 설정과 자동화 파이프라인을 구축합니다.",
        "details": "Flutter: Android Play Console, iOS App Store Connect 설정, 앱 서명 인증서 관리. Next.js: Vercel 배포 설정, 환경변수 관리, 도메인 연결. CI/CD: GitHub Actions 워크플로, 자동 테스트 실행, 코드 품질 검사. 모니터링: 애플리케이션 로그, 에러 추적(Sentry), 성능 모니터링. 블루-그린 배포, 점진적 롤아웃 전략.",
        "testStrategy": "빌드 파이프라인 테스트, 배포 자동화 검증, 모니터링 시스템 동작 확인, 롤백 시나리오 테스트",
        "priority": "high",
        "dependencies": [
          18,
          19
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-12T08:17:15.630Z",
      "updated": "2025-08-12T08:17:15.630Z",
      "description": "Tasks for master context"
    }
  }
}